<?xml version="1.0" standalone="yes"?>
<!-- build configuration -->
<project name="s3lib" default="compile" basedir=".">

    <!-- configuration properties -->
    <property name="app.name"       value="s3lib"/>
    <property name="deploy.dir"     value="dist"/>
    <property name="savedoc.dir"    value="docs"/>
    <property name="libs.dir.ant"   value="lib/ant"/>
    <property name="s3pipe.classdir" value="com/threerings/s3/pipe"/>
    <property name="s3pipe.main"    value="com.threerings.s3.pipe.Main"/>

    <!-- derived properties -->  
    <property name="dist.jar"       value="${app.name}.jar"/>
    <property name="javadoc.home"   value="${deploy.dir}/docs"/>
    <property name="s3pipe.manifest"    value="${deploy.dir}/s3pipe.mf"/>

    <!-- enumerate library dependencies -->
    <property name="libs.dir"       value="lib"/>
    <fileset dir="${libs.dir}" id="s3lib.libs">
        <include name="args4j-2.0.7.jar"/>
        <include name="commons-codec.jar"/>
        <include name="commons-httpclient.jar"/>
        <include name="commons-io.jar"/>
        <include name="commons-logging.jar"/>
        <include name="junit-3.7.jar"/>
    </fileset>

    <!-- declare our classpath -->
    <path id="classpath">
        <pathelement location="${deploy.dir}/classes"/>
        <fileset dir="${deploy.dir}/lib" includes="**/*.jar"/>
    </path>

    <path id="classpath.ant">
        <fileset dir="${libs.dir.ant}" includes="**/*.jar"/>
    </path>

    <!-- Ant tasks -->
    <taskdef name="one-jar" classname="com.simontuffs.onejar.ant.OneJarTask" onerror="report" classpathref="classpath.ant"/>
    <taskdef resource="net/sf/antcontrib/antlib.xml" onerror="report" classpathref="classpath.ant"/>

    <!-- prepares the application directories -->
    <target name="prepare">
        <mkdir dir="${deploy.dir}"/>
        <mkdir dir="${deploy.dir}/classes"/>
        <mkdir dir="${deploy.dir}/lib"/>
        <mkdir dir="${javadoc.home}"/>
        <copy todir="${deploy.dir}/classes">
            <fileset dir="src/java" includes="**/*.properties"/>
        </copy>
        <copy todir="${deploy.dir}/lib" flatten="true">
            <fileset refid="${app.name}.libs"/>
        </copy>
    </target>

    <!-- cleans out the intermediate build files -->
    <target name="clean">
        <delete dir="${deploy.dir}/classes"/>
        <delete dir="${deploy.dir}/docs"/>
    </target>

    <!-- cleans out the installed application -->
    <target name="distclean">
        <delete dir="${deploy.dir}"/>
    </target>

    <!-- build the java class files -->
    <target name="compile" depends="prepare">
        <depend srcdir="src/java" destdir="${deploy.dir}/classes"
            cache="${deploy.dir}/depcache"/>
        <javac srcdir="src/java" destdir="${deploy.dir}/classes"
            debug="on" optimize="${build.optimize}" deprecation="on"
            source="1.5" target="1.5">
            <classpath refid="classpath"/>
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>

    <!-- run the unit tests -->
    <target name="test" depends="compile">
        <!-- haul in our AWS id and key -->
        <property file="test.properties"/>

        <if>
            <isset property="test"/>
            <then>
                <!-- run one test -->
                <junit printsummary="yes">
                    <!-- Vend the aws. properties -->
                    <syspropertyset>
                        <propertyref prefix="aws."/>
                    </syspropertyset>

                    <!-- include the tests in our class path -->
                    <classpath>
                        <pathelement location="${deploy.dir}/classes"/>
                        <fileset dir="${deploy.dir}/lib" includes="**/*.jar"/>
                    </classpath>

                    <!-- human output -->
                    <formatter type="brief" usefile="false"/>

                    <!-- run the requested test -->
                    <test name="${test}"/>
                </junit>
            </then>
            <else>
                <!-- run all tests -->
                <junit printsummary="yes">
                    <!-- Vend the aws. properties -->
                    <syspropertyset>
                        <propertyref prefix="aws."/>
                    </syspropertyset>

                    <!-- include the tests in our class path -->
                    <classpath>
                        <pathelement location="${deploy.dir}/classes"/>
                        <fileset dir="${deploy.dir}/lib" includes="**/*.jar"/>
                    </classpath>

                    <!-- human output -->
                    <formatter type="brief" usefile="false"/>

                    <!-- batch run our tests -->
                    <batchtest>
                        <fileset dir="src/java">
                            <include name="**/*Test.java"/>
                        </fileset>
                    </batchtest>
                </junit>
            </else>
        </if>
    </target>

    <!-- build the javadoc documentation -->
    <target name="javadoc" depends="prepare">
        <javadoc sourcepath="src/java" packagenames="com.threerings.s3.client.*" destdir="${javadoc.home}" additionalparam="-breakiterator">
            <classpath refid="classpath"/>
    	    <link href="http://java.sun.com/j2se/1.5/docs/api/"/>
    	    <!-- Exclude private packages from the java docs -->
            <excludepackage name="com.threerings.s3.client.xml"/>
        </javadoc>
    </target>

    <!-- builds the javadocs and stuffs them in a directory where they won't
    be blown away when we do "clean" next time -->
    <target name="savedoc" depends="javadoc">
        <delete dir="${savedoc.dir}/api"/>
        <copy todir="${savedoc.dir}/api">
            <fileset dir="${javadoc.home}" includes="**/*"/>
        </copy>
    </target>

    <!-- the default target is to rebuild everything -->
    <target name="all" depends="clean,prepare,compile,javadoc"/>

    <!-- builds our distribution files -->
    <target name="dist" depends="prepare,compile">
        <!-- Build the s3lib jar -->
        <jar destfile="${deploy.dir}/${dist.jar}">
            <fileset dir="${deploy.dir}/classes">
                <include name="**/*.class"/>
                <exclude name="**/*Test.class"/>
                <exclude name="${s3pipe.classdir}"/>
            </fileset>
        </jar>

        <!-- Build the s3pipe application jar -->
        <manifest file="${s3pipe.manifest}">
            <attribute name="One-Jar-Main-Class" value="${s3pipe.main}"/>
        </manifest>
        <one-jar destfile="${deploy.dir}/s3pipe.jar" manifest="${s3pipe.manifest}">
            <main>
                <fileset dir="${deploy.dir}/classes">
                    <include name="${s3pipe.classdir}/**/*.class"/>
                </fileset>
            </main>
            <lib>
                <!-- The main s3lib jar -->
                <fileset file="${deploy.dir}/${dist.jar}"/>
                <!-- Libraries that s3lib depends upon -->
                <fileset dir="${deploy.dir}/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </lib>
        </one-jar>
    </target>
</project>
