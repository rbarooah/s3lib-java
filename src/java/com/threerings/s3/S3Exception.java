//  This software code is made available "AS IS" without warranties of any
//  kind.  You may copy, display, modify and redistribute the software
//  code either by itself or as incorporated into your code; provided that
//  you do not remove any proprietary notices.  Your use of this software
//  code is at your own risk and you waive any claim against Amazon
//  Digital Services, Inc. or its affiliates with respect to your use of
//  this software code.
//
// (c) 2006 Three Rings Design, Inc.
//
// Most of this class is autogenerated from the included awk scripts, and thusly,
// fantastically ugly.

package com.threerings.s3;

import java.io.IOException;
import java.io.StringReader;

import java.lang.Class;
import java.lang.reflect.Constructor;

import java.util.HashMap;

import org.apache.xerces.parsers.DOMParser;

import org.w3c.dom.Document;
import org.w3c.dom.Node;

import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

/** 
 * An exception that indicates a generic S3 error.
 */
public class S3Exception extends Exception
{
    // Documentation inherited
    public S3Exception () {
        this((String) null);
    }
    
    // Documentation inherited
    public S3Exception (String message) {
        this(message, null, null);
    }

    /**
     * Initialize an AWS exception with the associated message, AWS S3 requestId,
     * and AWS S3 hostId.
     * @param message Error message provided by S3.
     * @param requestId Request ID provided by S3.
     * @param hostId Host ID provided by S3;
     */
    public S3Exception (String message, String requestId, String hostId) {
        super(message);
        _requestId = requestId;
        _hostId = hostId;
    }

    /**
     * Extract the child node's text, if the parent node matches name.
     * @param name Name to match.
     * @param node Paren node.
     */
    protected static String _extractXmlChildText(Node node)
    {
        Node textNode = node.getFirstChild();
        if (textNode == null)
            return null;
        return textNode.getNodeValue();
    }

    /**
     * Convert an S3 XML error document into a S3Exception instance.
     * @param document A string containing the XML error document.
     */
    public static S3Exception exceptionForS3Error (String documentString) {
        DOMParser parser;
            
        try {
            parser = new DOMParser();
            parser.parse(new InputSource(new StringReader(documentString)));
        } catch (SAXException e) {
            // Return a generic exception
            return new S3Exception("Error (" + e + ") parsing S3 error " +
                "document: '" + documentString + "'");
        } catch (IOException e) {
            // This is not really possible
            return new S3Exception("I/O error (" + e + ") parsing S3 error " +
                "document: '" + documentString + "'");
        }
        
        // Extract the error data. We ignore elements that we don't understand,
        // and the document structure API should be stable.
        Document doc = parser.getDocument();
        Node node;
        String code = null;
        String errorMessage = null;
        String requestId = null;
        String hostId = null;

        for (node = doc.getDocumentElement().getFirstChild();
            node != null;
            node = node.getNextSibling()) {
            
            if (node.getNodeName().toLowerCase().equals("code")) {
                code = _extractXmlChildText(node);
                continue;
            }
            
            if (node.getNodeName().toLowerCase().equals("message")) {
                errorMessage = _extractXmlChildText(node);
                continue;
            }
            
            if (node.getNodeName().toLowerCase().equals("requestid")) {
                requestId = _extractXmlChildText(node);
                continue;
            }
            
            if (node.getNodeName().toLowerCase().equals("hostid")) {
                hostId = _extractXmlChildText(node);
                continue;
            }
        }
        
        // Try to instantiate an exception
        // This could use a static mapping, but exceptions are rare
        // conditions and there's enough ugly generated code in here as it is.
        try {
            Class cls;
            Constructor construct;
            
            // This '$' usage is broken, but necessary. See:
            //     http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4378381
            cls = Class.forName("com.threerings.s3.S3Exception$" + code + "Exception");
            
            // Grab the constructor
            construct = cls.getConstructor(new Class[] {String.class, String.class, String.class});
            
            return (S3Exception) construct.newInstance(new Object[] {errorMessage, requestId, hostId});
        } catch (Exception e) {
            return new S3Exception("An unhandled S3 error code was returned: " + code, requestId, hostId);
        }                
    }

    /** Get the Amazon S3 request ID. */
    public String getRequestId ()
    {
        return _requestId;
    }

    /** Get the Amazon S3 host ID. */
    public String getHostId ()
    {
        return _hostId;
    }

    /** Amazon S3 Request ID */
    protected String _requestId;
    
    /** Amazon S3 Host ID */
    protected String _hostId;


    // The following was autogenerated from the list of exceptions, copied from
    // http://docs.amazonwebservices.com/AmazonS3/2006-03-01/ErrorCodeList.html
    // using the included genexceptions.awk:
    //     awk -F '\t' -f genexceptions.awk <allerrors.txt
    
    /** Access Denied   */
    public static class AccessDeniedException extends S3Exception {
        public AccessDeniedException (String message) {
            this(message, null, null);
        }

        public AccessDeniedException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** There is a problem with your AWS account that prevents the operation from completing successfully. Please contact customer service at webservices@amazon.com.  */
    public static class AccountProblemException extends S3Exception {
        public AccountProblemException (String message) {
            this(message, null, null);
        }

        public AccountProblemException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** All access to this object has been disabled.  */
    public static class AllAccessDisabledException extends S3Exception {
        public AllAccessDisabledException (String message) {
            this(message, null, null);
        }

        public AllAccessDisabledException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** The e-mail address you provided is associated with more than one account.  */
    public static class AmbiguousGrantByEmailAddressException extends S3Exception {
        public AmbiguousGrantByEmailAddressException (String message) {
            this(message, null, null);
        }

        public AmbiguousGrantByEmailAddressException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** A conflicting conditional operation is currently in progress against this resource. Please try again.  */
    public static class OperationAbortedException extends S3Exception {
        public OperationAbortedException (String message) {
            this(message, null, null);
        }

        public OperationAbortedException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** The Content-MD5 you specified did not match what we received.  */
    public static class BadDigestException extends S3Exception {
        public BadDigestException (String message) {
            this(message, null, null);
        }

        public BadDigestException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** The named bucket you tried to create already exists.  */
    public static class BucketAlreadyExistsException extends S3Exception {
        public BucketAlreadyExistsException (String message) {
            this(message, null, null);
        }

        public BucketAlreadyExistsException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** The bucket you tried to delete is not empty.  */
    public static class BucketNotEmptyException extends S3Exception {
        public BucketNotEmptyException (String message) {
            this(message, null, null);
        }

        public BucketNotEmptyException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** This request does not support credentials.  */
    public static class CredentialsNotSupportedException extends S3Exception {
        public CredentialsNotSupportedException (String message) {
            this(message, null, null);
        }

        public CredentialsNotSupportedException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** Your proposed upload exceeds the maximum allowed object size.  */
    public static class EntityTooLargeException extends S3Exception {
        public EntityTooLargeException (String message) {
            this(message, null, null);
        }

        public EntityTooLargeException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** You did not provide the number of bytes specified by the Content-Length HTTP header  */
    public static class IncompleteBodyException extends S3Exception {
        public IncompleteBodyException (String message) {
            this(message, null, null);
        }

        public IncompleteBodyException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** We encountered an internal error. Please try again.  */
    public static class InternalErrorException extends S3Exception {
        public InternalErrorException (String message) {
            this(message, null, null);
        }

        public InternalErrorException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** The AWS Access Key Id you provided does not exist in our records.  */
    public static class InvalidAccessKeyIdException extends S3Exception {
        public InvalidAccessKeyIdException (String message) {
            this(message, null, null);
        }

        public InvalidAccessKeyIdException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** You must specify the Anonymous role.  */
    public static class InvalidAddressingHeaderException extends S3Exception {
        public InvalidAddressingHeaderException (String message) {
            this(message, null, null);
        }

        public InvalidAddressingHeaderException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** Invalid Argument  */
    public static class InvalidArgumentException extends S3Exception {
        public InvalidArgumentException (String message) {
            this(message, null, null);
        }

        public InvalidArgumentException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** The specified bucket is not valid.  */
    public static class InvalidBucketNameException extends S3Exception {
        public InvalidBucketNameException (String message) {
            this(message, null, null);
        }

        public InvalidBucketNameException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** The Content-MD5 you specified was an invalid.  */
    public static class InvalidDigestException extends S3Exception {
        public InvalidDigestException (String message) {
            this(message, null, null);
        }

        public InvalidDigestException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** The requested range is not satisfiable.  */
    public static class InvalidRangeException extends S3Exception {
        public InvalidRangeException (String message) {
            this(message, null, null);
        }

        public InvalidRangeException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** The provided security credentials are not valid.  */
    public static class InvalidSecurityException extends S3Exception {
        public InvalidSecurityException (String message) {
            this(message, null, null);
        }

        public InvalidSecurityException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** The SOAP request body is invalid.  */
    public static class InvalidSOAPRequestException extends S3Exception {
        public InvalidSOAPRequestException (String message) {
            this(message, null, null);
        }

        public InvalidSOAPRequestException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** The storage class you specified is not valid.  */
    public static class InvalidStorageClassException extends S3Exception {
        public InvalidStorageClassException (String message) {
            this(message, null, null);
        }

        public InvalidStorageClassException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** The target bucket for logging does not exist or is not owned by you.  */
    public static class InvalidTargetBucketForLoggingException extends S3Exception {
        public InvalidTargetBucketForLoggingException (String message) {
            this(message, null, null);
        }

        public InvalidTargetBucketForLoggingException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** Your key is too long.  */
    public static class KeyTooLongException extends S3Exception {
        public KeyTooLongException (String message) {
            this(message, null, null);
        }

        public KeyTooLongException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** Couldn't parse the specified URI.  */
    public static class InvalidURIException extends S3Exception {
        public InvalidURIException (String message) {
            this(message, null, null);
        }

        public InvalidURIException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** The XML you provided was not well-formed or did not validate against our published schema.  */
    public static class MalformedACLErrorException extends S3Exception {
        public MalformedACLErrorException (String message) {
            this(message, null, null);
        }

        public MalformedACLErrorException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** The XML you provided was not well-formed or did not validate against our published schema.  */
    public static class MalformedXMLErrorException extends S3Exception {
        public MalformedXMLErrorException (String message) {
            this(message, null, null);
        }

        public MalformedXMLErrorException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** Your request was too big.  */
    public static class MaxMessageLengthExceededException extends S3Exception {
        public MaxMessageLengthExceededException (String message) {
            this(message, null, null);
        }

        public MaxMessageLengthExceededException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** Your metadata headers exceed the maximum allowed metadata size.  */
    public static class MetadataTooLargeException extends S3Exception {
        public MetadataTooLargeException (String message) {
            this(message, null, null);
        }

        public MetadataTooLargeException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** The specified method is not allowed against this resource.  */
    public static class MethodNotAllowedException extends S3Exception {
        public MethodNotAllowedException (String message) {
            this(message, null, null);
        }

        public MethodNotAllowedException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** A SOAP attachment was expected, but none were found.  */
    public static class MissingAttachmentException extends S3Exception {
        public MissingAttachmentException (String message) {
            this(message, null, null);
        }

        public MissingAttachmentException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** You must provide the Content-Length HTTP header.  */
    public static class MissingContentLengthException extends S3Exception {
        public MissingContentLengthException (String message) {
            this(message, null, null);
        }

        public MissingContentLengthException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** The SOAP 1.1 request is missing a security element.  */
    public static class MissingSecurityElementException extends S3Exception {
        public MissingSecurityElementException (String message) {
            this(message, null, null);
        }

        public MissingSecurityElementException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** Your request was missing a required header.  */
    public static class MissingSecurityHeaderException extends S3Exception {
        public MissingSecurityHeaderException (String message) {
            this(message, null, null);
        }

        public MissingSecurityHeaderException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** There is no such thing as a logging status sub-resource for a key.  */
    public static class NoLoggingStatusForKeyException extends S3Exception {
        public NoLoggingStatusForKeyException (String message) {
            this(message, null, null);
        }

        public NoLoggingStatusForKeyException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** The specified bucket does not exist.  */
    public static class NoSuchBucketException extends S3Exception {
        public NoSuchBucketException (String message) {
            this(message, null, null);
        }

        public NoSuchBucketException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** The specified key does not exist.  */
    public static class NoSuchKeyException extends S3Exception {
        public NoSuchKeyException (String message) {
            this(message, null, null);
        }

        public NoSuchKeyException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** A header you provided implies functionality that is not implemented.  */
    public static class NotImplementedException extends S3Exception {
        public NotImplementedException (String message) {
            this(message, null, null);
        }

        public NotImplementedException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** Your account is not signed up for the S3 service. You must sign up before you can use S3. You can sign up at the following URL: http://aws.amazon.com/s3  */
    public static class NotSignedUpException extends S3Exception {
        public NotSignedUpException (String message) {
            this(message, null, null);
        }

        public NotSignedUpException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** At least one of the pre-conditions you specified did not hold.  */
    public static class PreconditionFailedException extends S3Exception {
        public PreconditionFailedException (String message) {
            this(message, null, null);
        }

        public PreconditionFailedException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** Your socket connection to the server was not read from or written to within the timeout period.  */
    public static class RequestTimeoutException extends S3Exception {
        public RequestTimeoutException (String message) {
            this(message, null, null);
        }

        public RequestTimeoutException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** The difference between the request time and the server's time is too large.  */
    public static class RequestTimeTooSkewedException extends S3Exception {
        public RequestTimeTooSkewedException (String message) {
            this(message, null, null);
        }

        public RequestTimeTooSkewedException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** Requesting the torrent file of a bucket is not permitted.  */
    public static class RequestTorrentOfBucketErrorException extends S3Exception {
        public RequestTorrentOfBucketErrorException (String message) {
            this(message, null, null);
        }

        public RequestTorrentOfBucketErrorException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }

    /** The request signature we calculated does not match the signature you provided. Check your AWS Secret Access Key and signing method. Consult the documentation under Authenticating REST Requests and Authenticating SOAP Requests for details.  */
    public static class SignatureDoesNotMatchException extends S3Exception {
        public SignatureDoesNotMatchException (String message) {
            this(message, null, null);
        }

        public SignatureDoesNotMatchException (String message, String requestId, String hostId) {
            super(message, requestId, hostId);
        }
    }
}